#if 0
#include "Json.h"
int main()
{
	Transaction t;
	ptime tt = boost::posix_time::microsec_clock::local_time();
	t.ID = 10000;
	t.timestamp = to_simple_string(tt);
	t.from = 8080;
	t.to = 8081;
	t.amount = -1000.5;
	t.balance = 1000000.5;

	Block b;
	b.index = 0;
	b.timestamp = to_simple_string(boost::posix_time::microsec_clock::local_time());
	b.prevHash = "0000001a";
	b.blockHash = "0000001b";
	b.merkleRoot = "0000001c";
	b.nonce = 1234567;
	b.difficulty = 111222333444.555;
	vector<Transaction> bt{ t, t, t };
	b.data = bt;

	BlockChain bc;
	bc.push_back(b);
	bc.push_back(b);
	bc.push_back(b);
	bc.push_back(b);

	Message msg1;
	msg1.m_head = Header::TRANSACTION;
	msg1.m_message.t = t;
	Message msg2;
	msg2.m_head = Header::BLOCK;
	msg2.m_message.b = b;
	Message msg3;
	msg3.m_head = Header::BLOCKCHAIN;
	msg3.m_message.bc = bc;

	// stringstream ss;
	// cout << write(t) << endl;
	// cout << write(bt) << endl;
	// cout << write(b) << endl;
	// cout << write(bc) << endl;
	// cout << write(msg1) << endl;
	// cout << write(msg2) << endl;
	// cout << write(msg3) << endl;
	// ss << write(t);

	/*
	string str_bc = write(bc);
	cout << str_bc << endl;

	mValue m_parse;
	auto ok = read(str_bc, m_parse);
	if (!ok)
	throw runtime_error{ "invalid json" };

	BlockChain bc1 = read_bc(m_parse);
	if (bc == bc1)
	cout << "Identical BlockChains" << endl;
	*/

	string str1 = write(msg1);
	string str2 = write(msg2);
	string str3 = write(msg3);

	Message MSG1 = read_message(str1);
	Message MSG2 = read_message(str2);
	Message MSG3 = read_message(str3);

	if (msg1 == MSG1)
		cout << "Message 1 identical" << endl;
	if (msg2 == MSG2)
		cout << "Message 2 identical" << endl;
	if (msg3 == MSG3)
		cout << "Message 3 identical" << endl;

	/*
	string file("C:/Users/rstrepparava/Documents/Visual Studio 2015/Projects/json_1/x64/Debug/demo.txt");
	ofstream os;
	os.open(file, ios::out);
	if (os.is_open())
	{
	os << write(msg1) << endl;
	os << write(msg2) << endl;
	os << write(msg3) << endl;
	}
	os.close();
	*/

	int kkk;
	cin >> kkk;
	return(kkk);
}
#endif 